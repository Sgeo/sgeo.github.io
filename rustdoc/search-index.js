var searchIndex = {};
searchIndex['hlist'] = {"items":[[0,"","hlist","This crate provides types `Nil` and `Cons<H, T>`, which together allow for creating lists consisting of multiple types.\nThe types in the list are present in the type of the list, so that `Cons<i32, Cons<i64, Nil>>` contains an `i32` and an `i64`.\nIf type `T` is present exactly once in an `HList`, it is usually possible to allow the compiler to find the `T` in the `HList` by using the `Find` trait.",null,null],[3,"Nil","","The empty `HList`.",null,null],[3,"Cons","","An `HList` with `H` at position 0, and `T` as the rest of the list.",null,null],[3,"There","","Used as an index into an `HList`.",null,null],[4,"Here","","Used as an index into an `HList`.",null,null],[8,"HList","","A marker trait that `Nil` and `Cons<H, T>` satisfies.\nNot currently used to enforce proper hlists, although this may change.\nProvides the `push()` method",null,null],[11,"push","","Consumes the `HList`, and returns a new HList with `item` at the beginning.",0,{"inputs":[{"name":"hlist"},{"name":"n"}],"output":{"name":"cons"}}],[8,"Find","","`Find<T, I>` is implemented for an `HList` if index `I` of the `HList` is a `T`",null,null],[10,"get","","Retrieves a `&T`.",1,{"inputs":[{"name":"find"}],"output":{"name":"t"}}],[10,"get_mut","","Retrieves a `&mut T`.",1,{"inputs":[{"name":"find"}],"output":{"name":"t"}}],[11,"get","","",2,{"inputs":[{"name":"cons"}],"output":{"name":"t"}}],[11,"get_mut","","",2,{"inputs":[{"name":"cons"}],"output":{"name":"t"}}],[11,"get","","",2,{"inputs":[{"name":"cons"}],"output":{"name":"t"}}],[11,"get_mut","","",2,{"inputs":[{"name":"cons"}],"output":{"name":"t"}}]],"paths":[[8,"HList"],[8,"Find"],[3,"Cons"]]};
initSearch(searchIndex);
